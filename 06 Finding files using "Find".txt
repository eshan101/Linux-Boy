
Syntax: `find [path...] [options] [expression]`

[path] - location of the directory where you want to do the search, for current directory use '/.'

[options] :-

-type		#> Used to define filetype (eg. file(f) or directory(d) )
-iname		#> Find file by name (case-insensitive)
-name	 	#> Find file by name
-size		#> Used to define file size as a parameter to search
-user		#> Used to give the used which owns the file
-regex		#> Using Regex with find. See regex [https:#>github.com/eshan101/Regex-Notes]
-maxdepth		#> In the current directory and subdirectories
-mindepth		#> Used to set minimum depth of directories to search

[expression] - It means whatever file or directory you want to search



[-type] :- All options for type
-type d	#> Directory
-type f	#> File
-type l	#> Symbolic link
-type b	#> Buffered block
-type c	#> Unbuffered character
-type p	#> Named pipe
-type s	#> Socket



[-size] :- All options for size
-size b	#> 512-byte blocks (default)
-size c	#> Bytes
-size k	#> Kilobytes
-size M	#> Megabytes
-size G	#> Gigabytes
-size T	#> Terabytes (only BSD)
-size P	#> Petabytes (only BSD)



[size more than or less than] :- Example commands to find files of sizes in some range.

#> Find all bigger than 10MB files
$ find / -size +10M

#> Find all smaller than 10MB files
$ find / -size -10M

#> Find all files that are exactly 10M
$ find / -size 10M

#> Find Size between 100MB and 1GB
$ find / -size +100M -size -1G

The + and - prefixes signify greater than and less than, as usual.



[Find files with specific permissions ] :- Example codes with comments

#> Find the files whose permissions are 777.
$ find . -type f -perm 0777 -print

#> Find the files without permission 777.
$ find / -type f ! -perm 777

#> Find SUID set files.
$ find / -perm /u=s

#> Find SGID set files.
$ find / -perm /g=s

#> Find Read Only files.
$ find / -perm /u=r

#> Find Executable files.
$ find / -perm /a=x



[Find files with specific owners and groups] :- Example codes with comments

#> Find single file based on user
$ find / -user root -name tecmint.txt

#> Find all files based on user
$ find /home -user tecmint

#> Find all files based on group
$ find /home -group developer

#> Find particular files of user
$ find /home -user tecmint -iname "*.txt"



[Searching multiple filenames] :- Example codes with comments

#> Find files with .sh and .txt extensions
$ find . -type f \( -name "*.sh" -o -name "*.txt" \)



[Searching in multiple directories] :- Example codes with comments

#> Find files with multiple dirs
$ find /opt /usr /var -name foo.scala -type f


[empty]: Examples codes with comments

#> Find all empty directories
$ find . -type d -empty

#> Delete all empty files in a directory
$ find . -type f -empty -delete



#> Basic 'find file' commands examples

$ find / -name foo.txt -type f -print             #> full command
$ find / -name foo.txt -type f                    #> -print isn't necessary
$ find / -name foo.txt                            #> don't have to specify "type==file"
$ find . -name foo.txt                            #> search under the current dir
$ find . -name "foo.*"                            #> wildcard
$ find . -name "*.txt"                            #> wildcard
$ find /users/al -name Cookbook -type d           #> search '/users/al'

#> search multiple dirs
$ find /opt /usr /var -name foo.scala -type f     #> search multiple dirs

#> case-insensitive searching
$ find . -iname foo                               #> find foo, Foo, FOo, FOO, etc.
$ find . -iname foo -type d                       #> same thing, but only dirs
$ find . -iname foo -type f                       #> same thing, but only files

#> find files with different extensions
$ find . -type f \( -name "*.c" -o -name "*.sh" \)                       #> *.c and *.sh files
$ find . -type f \( -name "*cache" -o -name "*xml" -o -name "*html" \)   #> three patterns

#> find files that don't match a pattern (-not)
$ find . -type f -not -name "*.html"                                #> find all files not ending in ".html"

#> find files by text in the file (find + grep)
$ find . -type f -name "*.java" -exec grep -l StringBuffer {} \;    #> find StringBuffer in all *.java files
$ find . -type f -name "*.java" -exec grep -il string {} \;         #> ignore case with -i option
$ find . -type f -name "*.gz" -exec zgrep 'GET /foo' {} \;          #> search for a string in gzip'd files

#> 5 lines before, 10 lines after grep matches
$ find . -type f -name "*.scala" -exec grep -B5 -A10 'null' {} \;

#> find files and act on them (find + exec)
$ find /usr/local -name "*.html" -type f -exec chmod 644 {} \;      #> change html files to mode 644
$ find htdocs cgi-bin -name "*.cgi" -type f -exec chmod 755 {} \;   #> change cgi files to mode 755
$ find . -name "*.pl" -exec ls -ld {} \;                            #> run ls command on files found

#> find and copy
$ find . -type f -name "*.mp3" -exec cp {} /tmp/MusicFiles \;       #> cp *.mp3 files to /tmp/MusicFiles

#> copy one file to many dirs
$ find dir1 dir2 dir3 dir4 -type d -exec cp header.shtml {} \;      #> copy the file header.shtml to those dirs

#> find and delete
$ find . -type f -name "Foo*" -exec rm {} \;                        #> remove all "Foo*" files under current dir
$ find . -type d -name CVS -exec rm -r {} \;                        #> remove all subdirectories named "CVS" under current dir

#> find files by modification time
$ find . -mtime 1               #> 24 hours
$ find . -mtime -7              #> last 7 days
$ find . -mtime -7 -type f      #> just files
$ find . -mtime -7 -type d      #> just dirs

#> find files by modification time using a temp file
$ touch 09301330 poop           #> 1) create a temp file with a specific timestamp
$ find . -mnewer poop           #> 2) returns a list of new files
$ rm poop                       #> 3) rm the temp file

#> find with time: this works on mac os x
$ find / -newerct '1 minute ago' -print

#> find and tar
$ find . -type f -name "*.java" | xargs tar cvf myfile.tar
$ find . -type f -name "*.java" | xargs tar rvf myfile.tar

#> find, tar, and xargs
$ find . -name -type f '*.mp3' -mtime -180 -print0 | xargs -0 tar rvf music.tar
     (-print0 helps handle spaces in filenames)

#> find and pax (instead of xargs and tar)$ 
$ find . -type f -name "*html" | xargs tar cvf jw-htmlfiles.tar -
$ find . -type f -name "*html" | pax -w -f jw-htmlfiles.tar

#> exclude files from other devices (like depreceted -xdev in macOS). For linux: -xdev
$ find -x . -type f -name "*.java"